We are going to look at 2 use cases in the field of NLP. First
one is customer service chatbot, second one is information extraction task. When
you go in Google and search for a person name, on the right hand side you see some key information about that person. We
will see how regular expression can be useful in solving some of these problems.
We will be writing python code today, so it's gonna be a totally hands-on tutorial
and in the end I will have an exercise for you to work on. As a prerequisite you
need to have basic python knowledge. If you don't know python, follow my first 15 videos in my python
tutorial playlist and also look at the python regular expression video which I
did it separately. That video goes over the basics of regular expression and you need to have
that understanding and that will help you in today's video. Regular expression is all about
matching pattern in a text and retrieving key information out of it. And if anyone who is starting the NLP
learning regular expression is the first thing that I advise them that they learn because
many times the NLP problems can be solved completely by regular expression and in
that case you don't have to use any fancy machine learning. In real life you will see many use cases where
the problems are solved using hybrid approaches where part of the problem is always solved by regular expression and
that's why regular expression is super important in your NLP career.
Some time back I ordered this Oculus VR headset from an e-commerce website and the order had some issues. So I started
having a conversation with the customer support team. When I complained about an issue with
this particular order number, on the other hand a chatbot replied and
they located my order number. Here it says Agent Vinod, but it's not a real person. There is a computer
who is auto replying to my messages. Now how did it locate my order number in
their database. Well they use pattern matching. When I said I'm having an issue with my
order number what they do is they will figure out there is an order and then there is a hash sign
and then they take all the subsequent sequence of digits because that would be
my order number. Now I said it this way, someone else might say this my order is having an
issue. They might not put hash sign or someone can say I have a problem
with my order number. They might use this word NUMBER.
In all these cases we can come up with a common pattern which will be:
there is a word order after that there is any sequence of characters except digits and then there
is a sequence of digits. So if you look at all the three different cases that we looked at, in the first one there was
order, then there was hash sign, then there was the actual number. After that there is order there is nothing,
directly the the actual number and then there is order the word number number
and the sequence of digits. Now this is some this is
now here is the place where you can use regular expression. Regular expression
will just do the pattern matching for you. A subsequent conversation might be
that the chatbot might ask me for phone number and email id as a way of
verifying my account. And I might say, "All right, here's my phone number and email id."
Someone else might say this because when I'm replying there is no fixed format. I
can reply in 3 different ways correct? But the phone number and email id here
also have patterns. If you look at email id, the pattern is there is a sequence of
character, then there is add sign again sequence of character then there is dot then com.
There could be .io .ai different email ids, but let's look at the simple use case which would be .com
For phone numbers there are 2 different formats. But in the first format there is there is like
a bracket and brackets have 3 digits, then there is hyphen, three digits hyphen four digits. In the second use case it's
a continuous sequence of ten digits. But the point I want to make here is
you can come up with some kind of pattern matching and let's
look at the python code which can extract this meaningful information out
of this conversation. In terms of installation first thing you need on your computer is python. Go to
youtube search for install python video and just follow the instructions.
The second thing you need is I personally use on my windows computer
a software called git bash, this allows me to run commands on Unix. So you go to
here just download git bash and install it, and I will show you. I have installed it
here already and if I click on it, see I get this kind of command prompt.
You can also use Windows command prompt that's fine. If you are on Linux, Ubuntu
you already got your default command prompt so you don't have to worry about this. But I like running Unix commands on
Windows, for that reason I have git bash.
Also go to youtube search for codebasics jupyter notebook tutorial, watch these 2 videos so that you get an idea on
what is jupiter notebook. It is a tool that will we will use to
write our code. We have mentioned this before that you
need to know python. So if you go to code basics python tutorial playlist,
here you need to follow first 14 videos actually.
And you should have a good understanding of the programming language. These videos are very short, very easy
even a small student small child can learn it easily. They are python is the most
easiest language, and you would have also looked at code
basics regular expression video. I know there are a lot of prerequisites but you need to know all of this before you
start the actual coding. If you know these things already a little bit, then
you can just skip all right? So that was pre-requisite plus installation that you need on your
computer. I open git bash by clicking on this command here, this
icon I'm in c code directory. I have created a new directory called NLP
tutorials and I'm going to go here. So I have created one more directory inside
it. So if you are if you want to just see it
so c code and then NLP tutorials and I have this directory here okay? I have some files but
ignore that let's say you're starting here and you can
use python notebook to launch the jupyter notebook.
You can also type in jupyter notebook to launch your jupyter notebook, that's a
command prompt that allows you to run python code and here is what I have,
I'm going to go here and I'm going to create a new python file.
You can just say okay regex tutorial
tutorial, NLP give some name and you're going to import
okay. So I'm just going to increase the font size here. Let me just make it bigger
you're going to import a module called re So re is regular expression. In python,
this module comes in built and it allows you to do
pattern matching. Now
before we use this module, we are going to go to amazing website called regex101.com
This website allows you to write your regular expression and what I generally do is I create my regular expression
here and then I use it in my python code over here. So let's look at
the conversation that we have. So the conversation we have is
this: so this is your regular text. So I'm going to
okay so select python here, and let's see if there is a way I can close this.
Okay no problem. Here I copy pasted various chats we have. So
we're going to extract phone number and email id first.
So let's focus on phone number. Phone number is
a sequence of 10 digits, or it could be
this pattern. We already saw in our presentation right? So where is our presentation? In
presentation we saw phone number can have these 2 patterns: either continuous ten digits,
or three digits in bracket hyphen three digits whatever. So let's look at this particular
scenario first. In regular expression how do you capture 10 continuous digits?
So if you look at here the help, this help is super useful. Here it says for any digits you will use
slash d So I'm going to now in the top area I'm going to write my regular expression. So
if it's a slash d, so slash d will match
only single digits. So if you look at the match information here, see it match this. This is your first
match, second match, third match it match all the single digits
okay? And here you have explanation as well. So it will explain you why it matched and
what's under underlying rule that it used. Now I want to say
match 10 digits. So let's look at couple of other things. When you have slash d here it is just
one digit. Let's say if you want to match 2 digits, you can do two three
see it will now match 3 continuous digits. See these are 3 continuous digits.
1 2 3 5 6 7 8 9 Wherever you see three continuous digits
it has matched all of that. And if you look at again match information, see 1 2 3 5 6 7 8 9
1 1 2 3 etc This is just a pattern matching tool
folks. It's not as hard as you think so pause this video for a moment. Just think about it
it is just saying match me three digits from all my strings.
If I want to do 10 digits, I can do this. See,
and it matched it matched these 2 So this is my regular expression for phone number.
But typing 10 digits is cumbersome. There should be an easier way to say
that match 10 digits. Well that easier way is this. So look at this on the right right hand
side okay? It says exactly 3 of
a okay? So exactly three matches basically
of any character a So I would say
10 So now this is matching exactly 10 digits and slash d is basically any
digit 0 to 9. So this is my regular expression. See
this one and that one. Okay
so now that is my first format. We'll look into second format little
later. But let's try this regular expression here in our code.
So I'm gonna go to my code here
and I will say my chat one. So I will just
have all the all kind of chats here and then
I will say re . So re has this function called find all
okay? And the first parameter that it takes is a pattern.
So pattern and you can look at python's regu regular expression python regex
documentation and it will show you all the documentation. You can read through it okay. I know it that's why I'm just
directly using it. So the first pattern is this is exactly what I do, I just copy
paste directly here this is my pattern so you have pattern and you have a text.
So the first parameter is pattern, second parameter is the text.
And you find your matches here and you print the matches. See
so here this is the match that you got
from this particular pattern. Now if you have this phone number chat
2, it will not match okay? But chat 1
let's say this is my first phone number, let's say I have two phone numbers okay 999 888 1234
let's see what happens. So you hit control enter to execute this shell.
See it in matching two, so that works! But what do you do
for chat 2? Okay let's let's look at that. So here
the pattern I have is bracket and inside bracket, I have three digits. So let's let's try to retrieve
that portion. So how do you specify bracket? Well bracket I can just say this
and 3 digits is slash d 3 we already looked at it right?
But slash is a
specific uh let's see.
So the bracket bracket has a special meaning actually which is to capture everything.
And for that reason I need to use
see here it is matching 1 2 3 5 6 7 I don't want it to match, it doesn't have a
bracket surrounding and when I put a bracket, bracket has a special kind of
meaning in regular expression. That's why you need to use escape
character, as by an escape character is slash like this.
Yes, so I need to use this escape character
so that the bracket gets a literal treatment. So it doesn't have a specific meaning,
you know otherwise that character has a specific meaning like how star and plus has a specific meaning. But if you want
to do a literal match, then you have to use slash. So without slash just watch this. So if I
don't put slash before the bracket, it is matching so many things. See 1 2 3 I don't want to match because 1
2 3 doesn't have a surrounding bracket. So I want to do slash here,
slash here and now it is matching only that 1 2
3 and then this okay I want to match the whole thing
because if I just leave it here and if if someone has this kind of
number abc, see this is matching I don't want this to match, I want to match this whole pattern.
So the whole pattern is you need slash after that, then again three digits. So three digits is this
right? Slash d is 1 digit and when you say this it means 3 digits.
Then again slash then d, then four digits correct? So see now I
have the old match. Now how do I match
this number and this number both at the same time? And by the way just to prove it out
it will match all the instances okay? Whenever you have this pattern 1 2 3 4
see this blue highlight means it's you see match one and match two. If I have one less character see it will not match
or one more character it will not match or if I have some let's say whatever
some other character it will not match. It will match only if you have
three digits bracket, hyphen three digits slash four digits then only it will match.
Okay so this part looks good, and the first part was this one right?
slash d? So how do you say or this or that
okay? So let me do that. I can do this and there is a pipe symbol. Pipe means or,
so now this is the second pattern, this is the first pattern and you put just the pipe
pipe means or. So here you see
alternate match either a or b. Yes! So now
I have the whole pattern, I can again copy paste. I love copy paste by the way. Copy paste is a very important
tool okay. So chat 2, see it is finding it out,
chat 1 it is finding it out. Chat 3 it is finding it out.
Hooray! All right, so now I extracted my phone number. This is a
primitive regular expression. I I understand there could be phone number with area code and all that and you can
make necessary enhancement, but this is extracting at least the basic pattern that we are seeing
okay? Now let's look at email id. What is the format of email id?
Email id is something where there are a bunch of characters, then there is add symbol, then there are a
bunch of characters dot symbol and then com You can have .ai there are different
domains, but I'm just going to tackle maybe a basic use case here.
Okay so remove this and I have this email id. Let me make
this email a little complex. I will say I will introduce
something like because there could be a number right in email id. So my goal is to extract this email id and this one,
both the email ids okay. So I have to say bunch of characters followed by at
okay? So at is matching. Before at I want bunch of character. See
if I have space I don't want that okay? I want bunch of character. What are the valid characters in email? Well
small alphabet a to z, then big alphabet which is capital a to z,
then you can have underscore you can also have numbers. So let's say for now just to
keep things simple these are the possible things that you can have in email. Any number from 0 to nine,
character a to z both smallcase, uppercase. So
when you want to say, see here a character in range a to z,
when you do a to z it will match any character which is an a to z range.
So see here it match c because c is in a to z range and if this will
match by the way just a single character. If you want to say sequence of character,
you have to say star. See if I don't have star it is matching only c. So match information c at this
is the match. But if I put star it is matching abc the whole thing.
Now it did not match this because this has this has digits. So if you want to set
digits you can say 0 to 9, so it will match.
See now it is matching 82 a because either anything from a to z or anything
from 0 to 9 or anything from alphabet a to z
and star and this. So now if I have alphabet a to z and if
I have a character like capital a, see it is matching. But if I remove a to z
see that's capital a is not matching. It's if you think about it, this is not hard. Just just think about it with a
calm mind. Take your time. It takes time folks. This this took me so much time first time I learned it. You you are
awesome! You are just learning it fast okay and then you can have underscore also so just specify underscore.
Ah! See now it is matching this this this all 3.
Perfect! After that you can have your domain. So your domain can again be this same thing.
Let's say your domain cannot have underscore. So I just copy paste it maybe remove underscore.
Or can domain have underscore? I'm not sure okay. So again star.
So now it is matching the whole thing and then you have dot. Now dot has a special meaning again, see all this these
things have so many special meaning. Dot is any single character. So if I put dot,
it is going to match this dot. But see if I have let's say explanation, it will
match that also because it's any character. You want to match only
dot, so only dot will be this.
So when you put slash it will take in the character after slash as a literal meaning.
So now I have this and this but you I don't have this particular as a match, but if I remove this and put dot,
you get that as a matches as well. And then you can have a .com
okay? I'm just using .com if you want to use
any domain, like let's say .io that means
any character from a to z. So any character from a to z again is a to z capital a to capital z,
and also star. So now it matches io and both these domains okay? So we're going to use this
as a regular expression. When you look at the regular expression in a code, it looks much complex. But if you build one
by one, step by step it's not as complex. So I'm going to use this here
and I will say this okay?
See it is matching so chat, chat 1 is this email id, chat 2 is
this email id, chat 3 is this email id. You can try changing your email id and it will match.
So you can do this kind of match and of course this gives you an array. So if you let's say I want to get my email so you
can say email is equal to matches 0 and when I look at email
that's the email you got! Okay.
So that's all good. So I got my email and I got my
phone number. Now I need to get my
order because if you remember our conversation,
the first conversation is I'm having an issue with my order. So
any of these sequences I want to match the order number.
So let's do that. So I'm going to say
chat 1 is this. And by the way I'm just copy pasting the code right now. But later on you will have the whole
notebook available. I will properly give you the whole code, it will be in the video description below so check it out.
So what will be now my pattern? So let me do this, so chat 1
is this, uh chat 2 is this,
I'm just showing different forms of
this text that user could have typed in. What is my pattern?
Okay, I need to fill out this pattern here to retrieve my order number. So let's
again copy paste this whole thing in here
and order. Okay so order, when you do order it matches this. After that you want to save
any character except digits. So you want to go till you find
your first digit and once you find your first digit, you want to take the sequence of remaining digits and
that's your order number. How do I say match anything that is not
a digit. Well see it's actually easy.
If you do this, this is one of the way. By the way in regular expression there are multiple ways of doing the same thing. So
if I'm doing one way, the same thing can be done in other way too. Here it says
match any character but not a to z. So if I do something like this
slash d slash d is my digit see if I do this, it will match digit. But if I do
this particular character it means match everything that is not a digit.
Okay and it is matching, see it is matching. My first match is dot and when you say star, see
this will match only one character. So after order this one match see this one
match space this one match this dot here means space. But if you want to make match more than
one character, you can say star. And now what happens is it will match order number order number
order all of that. And then you want to take a sequence of digits,
that digit sequence can be anything right? So slash d star
So when you do slash d star it is matching this thing. So now I
matched all various patterns of order number but,
the problem here is the match is giving me the whole thing. I want just the
order number part of it. So in my regular expression match, I got this string but I
want a portion of that string, and the way you retrieve that portion is by using brackets.
So I want to retrieve this much part right slash d star, so I will carefully put
brackets. See bracket bracket Oh now a magic happen!
See it so there are two things I'm getting: the match and from that match, I want a sub portion
which is order number and see this is the order number and they call it a group
okay? So that's how you do it. So here I will just go here,
this is my regular expression. Okay? I got my order number. See chat 1,
chat 2 is order numbers chat 3 and whatever the order number is, it could be
smaller, it could be longer that could be someone might say
my order number is this one. See it is still matching
because it is starting from order, taking all the characters which are not digits and then taking sequence of digits as an
order number. This regular expression my friends is so powerful.
Now we are going to write code for our second task which is information extraction. When you search for Elon Musk
in google on the right hand side you see the key information about this person.
How can we do this in our code? So let's go to wikipedia. wikipedia is
the usual resource that people use. However by the way what google is doing is much advanced okay?
I'm just going to do very primitive version because google looks at wikipedia.
Net worth they retrieve from forbes okay? So all the information could be coming from multiple sources.
But let's say you want to use wikipedia to retrieve key information for any person. Let's say
you are designing a software tool where you enter a person name and it gives you key information.
So on right hand side you see the section where you have all this useful information about this person.
Usually you will write a scrapping code you know web scrapping
code where your Python script you can use a library called scrappy and that script can go to
wikipedia, it can look at that person's page and try to scrap this code okay? So if you look at
view page source it will be an html file. So it's a markup you have
to remove the markup in your python code. In the markup
you might get some some of the tags easy like say early life there is a tag so it kind of
becomes easier. But let's say you are getting this particular information
as a text. So I'm going to have
this text like part of this text here. So I'm going to remove everything now and I
will say this okay? So what I have here is or let me try
this here first because that's very important. So I put
information on Mr Musk here okay and there are all sorts of character like see unicode characters
and that's what happens folks like in real life when you're solving NLP problem you'll have a lot of garbage. You
have to do all that cleanup. Uh so
let's say I want to retrieve the age of a person and if you look at it age is in bracket, so that is age space
person's age okay? So that's pretty straightforward. So there is age
and there is space and then there is there is the number.
Now if you look at any other person, let's say
any other person. See age space whatever right?
Um you can take anyone. So any person you
take I think most of the people have
see they have the age space. So they follow the same format. We can assume that's the
same format that we are following and now
we can write age then there is space for space you can hit space, and then there is a sequence of digits.
So you can say slash d
plus. Plus means, what is plus? Let's see.
Plus is one or more of this character. So one or more of this character,
it has to be at least one. If you do star is like zero or more characters. See zero or more
character. So I want to do this and in the match, I got the whole thing.
I want to grab only the age portion and you can just put little brackets. Yes! So
bracket bracket and I got the age here okay? So the age is pretty straightforward. Whenever you
see this pattern wherever you have age let's say someone's age is 720 years, I'm
just kidding it's not that long but it will match that. So here
I'm going to come and I'm going to say
this. Perfect?
And that's my text and okay
text okay name text is not defined. Maybe I
didn't do ctrl enter So you to do ctrl enter and an age is something you got
here. Let's retrieve now
what is the second thing you want to retrieve? Let's say
let me go back to the Iron man of America?
Okay who is Iron man of America? Mr. Musk. Okay
born let's say you want to retrieve the name. So name is something that comes after
born okay? So if you look at a couple of other cases, I think
yeah the pattern here is after born whatever string you find until the line ends,
that's your name. So how do you do that in Regex? So you will say born,
okay after born now you want to grab
all the characters till you find slash n So slash n
means end of line okay? So I can say
dot is any character, star means zero or more characters. So it give gives you the whole thing
and then you can put this here. So see Elon Musk. Now it gets
extra spaces, but you can in python you can call this strip
function to remove the leading and lagging white space. So it will work.
You and you can do slash n to kind of say that this is my line end
okay? Even if you don't do it it will work because by default find all
the dot doesn't match slash n okay? So I'm just going to copy paste
this here, I mean it's it's it's fine if you don't it doesn't
matter if you provide slash and or. See and then
when you do 0 it will give you the 0 and when you do strip, it will remove the white spaces
around the dead string. All right after born what do you want to
get next? Okay the birthplace or let's say birthdate and birthplace these are the things you want. Okay how
do you get the birthdate? To get the birth
birthplace and birthdate okay so how do you get
birthdate first? So where is my birthdate? So birthdate is basically
anything so anything that starts after this born
line. So there is a born line, below that line that string
you know here so if I say after this if I say dot, see dot is matching one
character and if I say star it will match the whole character. But I don't want to
grab the whole line. See by the way, so when I say dot star
you see match it grab the whole line. This is the way you can get the entire line after the born line.
But you don't want to get the whole line. You want to say stop when you have slash this edge. So
for bracket by the so I can say this. But for bracket I need to give this special character because bracket has a special
meaning and that's it. Now it is grabbing everything in dot
star before bracket age so my June 28, 1971
okay. So that's the that's the pattern for
my okay my born.
Okay so this copy paste. Copy paste is the most important thing.
Okay I get the birth date. Isn't this powerful folks? Don't you realize the power of regular expression
already? All right! I want to now grab the birthplace.
What is birthplace? How do what is the pattern here? Look at it. So birthplace so
a line so you have a line of age, so after that age line the second line the
whole line is your birthplace. So maybe I can use that as a pattern. Find me this age and find me the the
line below it. So how do you find age. Well this is how do you
this is how you find age okay? And age is dot star slash n
So you go all the way till that and then the next line. What is the next line?
Dot star and when you put it in bracket
you got the whole birthplace. Okay so I'm going to copy this. Regular
expression takes practice folks. When I started learning it, I had difficulties.
So if you're not getting it, don't worry. It you will get it it's it just just practice it okay? Just be patient,
practice it. I'm gonna give you by the way exercise towards the end. Make sure you work on an exercise because that
you are sincere student. Cool my birthplace. Now I can combine
all of this into a single python function or let me write a python function which
which can say get pattern match. See you are seeing I'm doing the same thing again
and again and again. So I can just write a python function, get pattern match. Same
I took this code and I'm saying if matches then return me the 0 as match. So
so that if I want to get let's say the birthplace, I can just do pattern and
text. So I can do text and before text comes the pattern. So if I do pattern here
quickly this gives me it's
you know I wrote just a simple function. And now I can write a big function called get
what is my function name. Okay my function name is get, you can give any function name but I
will say get personal information from this text.
And let's say for age what was the regular expression for the
age? See age was this okay? So whatever regular expression I
built, I'm just going to use that. So this is my age, my full name, birthplace, birthdate is
this okay? And then I can return a dictionary object. If you
don't know about python dictionary follow my python tutorials playlist.
And then I can have this. I converted age into an integer because from string because see
edge was a string code here. String, I am converting it into a
integer and ctrl enter now. I have this function ready and when you say get personal information on text,
see Elon Musk it gave me all this nice information. If I have another person let's say me Mr.
Mukesh Ambani who is a billionaire richest man of India,
then uh so now this is Mukesh Ambani okay? I went to his page, I just copy pasted. Let's see.
Okay so the text is different now okay and when you do control enter,
now it is giving me Mukesh Ambani's information. So now you give any text which is
following the convention that we used, it will give you the information.
All right? So that was all I had for this coding video today. So just to summarize
what we learned was we used regular expression for chatbot use case and information extraction use
case. We just looked at primitive regular expressions and we saw how they can be
useful to retrieve all the information. In natural language processing there are very lot of advanced techniques that we are
going to use. But this is just a beginning. Now the most interesting part
of any of my my tutorials is exercise. So I'm going to
give you this exercise. This is the same exercise I had for my python Regex video.